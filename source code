import cv2
import numpy as np
from tensorflow.keras.applications.vgg16 import VGG16, preprocess_input
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.preprocessing.image import img_to_array

# Load the VGG16 model pre-trained on ImageNet
base_model = VGG16(weights='imagenet', include_top=False, input_shape=(48, 48, 3))
x = base_model.output
x = Flatten()(x)
x = Dense(512, activation='relu')(x)
predictions = Dense(3, activation='softmax')(x)  # 3 emotions: Angry, Happy, Sad
model = Model(inputs=base_model.input, outputs=predictions)

# Load the pre-trained weights for the emotion detection model
model.load_weights('path_to_emotion_weights.h5')

# Define the emotions labels
emotions = ['Angry', 'Happy', 'Sad']

# Open the camera
camera = cv2.VideoCapture(0)

while True:
    ret, frame = camera.read()
    if not ret:
        break

    # Resize the frame to the input size expected by the model
    input_size = (48, 48)
    resized_frame = cv2.resize(frame, input_size)

    # Preprocess the frame for VGG16
    preprocessed_frame = preprocess_input(img_to_array(resized_frame))

    # Expand dimensions to match input shape
    input_data = np.expand_dims(preprocessed_frame, axis=0)

    # Predict the emotion
    predictions = model.predict(input_data)

    # Get the index of the emotion with the highest probability
    predicted_emotion_index = np.argmax(predictions)
    predicted_emotion = emotions[predicted_emotion_index]

    # Display the predicted emotion on the frame
    cv2.putText(frame, predicted_emotion, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    # Display the frame
    cv2.imshow('Emotion Detection', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the camera and close all windows
camera.release()
cv2.destroyAllWindows()
